unit UClasse.Relatorio.Fornecedores;

interface

uses UClasse.Query, UInterfaces, UDados.Conexao, Data.DB, Vcl.Dialogs,
  System.SysUtils, Vcl.Forms, Winapi.Windows, Vcl.Controls,
  UClasse.Gravar.Log.Sistema, Vcl.ComCtrls, Vcl.DBGrids, Vcl.Mask;

type

  TEntity = class(TInterfacedObject, iEntity)
  private

    FQuery: iConexaoQuery;
    FGravarLog: iGravarLogOperacoes;
    FTabela: string;
    FCampo: string;
    FValor: string;
    FDataInicial: TDate;
    FDataFinal: TDate;

    FCodigo: integer;
    FNome: string;

  public

    function nomeTabela(value: string): iRelatorioFornecedores;
    function getCampo(value: string): iRelatorioFornecedores;
    function getValor(value: string): iRelatorioFornecedores;
    function getDataInicial(value: TDate): iRelatorioFornecedores;
    function getDataFinal(value: TDate): iRelatorioFornecedores;
    function open(value: string): iRelatorioFornecedores;
    function pesquisar: iRelatorioFornecedores;
    function ExecSql: iRelatorioFornecedores;
    function sqlPesquisa: iRelatorioFornecedores;
    function sqlPesquisaData: iRelatorioFornecedores;
    function sqlPesquisaEstatica: iRelatorioFornecedores;

    function abrir: iRelatorioFornecedores;
    function atualizar: iRelatorioFornecedores;
    function cancelar: iRelatorioFornecedores;
    function fecharQuery: iRelatorioFornecedores;
    function listarGrid(value: TDataSource): iRelatorioFornecedores;
    function ordenarGrid(column: TColumn): iRelatorioFornecedores;

    function exportar: iRelatorioFornecedores;
    function validarData(componet: tmaskEdit): iRelatorioFornecedores;

    constructor create;
    destructor destroy; override;
    class function new: iEntity;
  end;

implementation

{ TEntity }

function TEntity.abrir: iEntity;
begin

  result := self;
  FQuery.Query(FTabela);

end;

function TEntity.atualizar: iEntity;
begin
  result := self;
  FQuery.TQuery.Refresh;
end;

function TEntity.cancelar: iEntity;
begin
  FQuery.TQuery.Cancel;
  // FQuery.TQuery.close;
end;

constructor TEntity.create;
begin
  FTabela := 'FORNECEDORES';
  FQuery := TConexaoQuery.new.Query(FTabela);

  FGravarLog := TGravarLogSistema.new;
  FGravarLog.getJanela('Relatório de fornecedores').getCodigoFuncionario
    (funcionarioLogado);
  // (0 { definir o usuário quando construir a aplicação } );

end;

destructor TEntity.destroy;
begin

  inherited;
end;

function TEntity.ExecSql: iEntity;
begin
  result := self;
  FQuery.ExecSql(FTabela);
end;

function TEntity.exportar: iEntity;
begin
  result := self;
end;

function TEntity.fecharQuery: iEntity;
begin
  FQuery.TQuery.close;
end;

function TEntity.getCampo(value: string): iEntity;
begin
  result := self;
  FCampo := value;
end;

function TEntity.getDataFinal(value: TDate): iEntity;
begin
  result := self;
  FDataFinal := value;
  // FQuery.getDataFinal(value);
end;

function TEntity.getDataInicial(value: TDate): iEntity;
begin
  result := self;
  FDataInicial := value;
  // FQuery.getDataInicial(value);
end;

function TEntity.getValor(value: string): iEntity;
begin
  result := self;
  FValor := UpperCase(value);
end;

function TEntity.listarGrid(value: TDataSource): iEntity;
begin

  result := self;

  with FQuery.TQuery do
  begin
    FieldByName('ID').DisplayLabel := 'Código';
    FieldByName('NOME_FANTASIA').DisplayLabel := 'Nome fantasia';
    FieldByName('RAZAO_SOCIAL').DisplayLabel := 'Razão social';
    FieldByName('CPF_CNPJ').DisplayLabel := 'CPF ou CNPJ';
    FieldByName('INSCRICAO_ESTADUAL').DisplayLabel := 'Inscrição estadual';
    FieldByName('ENDERECO').DisplayLabel := 'Endereço';
    FieldByName('BAIRRO').DisplayLabel := 'Bairro';
    FieldByName('NUMERO').DisplayLabel := 'Número';
    FieldByName('COMPLEMENTO').DisplayLabel := 'Complemento';
    FieldByName('CEP').DisplayLabel := 'CEP';
    FieldByName('CIDADE').DisplayLabel := 'Cidade';
    FieldByName('UF').DisplayLabel := 'Estado';
    FieldByName('TELEFONE').DisplayLabel := 'Telefone';
    FieldByName('CELULAR').DisplayLabel := 'Celular';
    FieldByName('EMAIL').DisplayLabel := 'E-Mail';
    FieldByName('RESPONSAVEL').DisplayLabel := 'Responsável';
    FieldByName('FUINCIONARIO_CADASTRO').DisplayLabel := 'Funcionário';
    FieldByName('OBSERVACAO').DisplayLabel := 'Observação';

    FieldByName('NOME_FANTASIA').DisplayWidth := 40;
    FieldByName('RAZAO_SOCIAL').DisplayWidth := 40;
    FieldByName('ENDERECO').DisplayWidth := 30;
    FieldByName('BAIRRO').DisplayWidth := 30;
    FieldByName('COMPLEMENTO').DisplayWidth := 30;
    FieldByName('EMAIL').DisplayWidth := 30;
    FieldByName('RESPONSAVEL').DisplayWidth := 30;
    FieldByName('OBSERVACAO').DisplayWidth := 40;

  end;

  value.DataSet := FQuery.TQuery;

end;

class function TEntity.new: iEntity;
begin
  result := self.create;
end;

function TEntity.nomeTabela(value: string): iEntity;
begin
  result := self;
  FTabela := value;
end;

function TEntity.open(value: string): iEntity;
begin
  FQuery.Query(FTabela);
end;

function TEntity.ordenarGrid(column: TColumn): iEntity;
begin

  if FQuery.TQuery.IndexFieldNames = column.FieldName then
    FQuery.TQuery.IndexFieldNames := column.FieldName + ':D'
  else
    FQuery.TQuery.IndexFieldNames := column.FieldName;

end;

function TEntity.pesquisar: iEntity;
begin
  result := self;
end;

function TEntity.sqlPesquisa: iEntity;
begin
  result := self;
  FQuery.getCampo(FCampo).getValor(FValor).sqlPesquisa(FTabela);
end;

function TEntity.sqlPesquisaData: iEntity;
begin
  result := self;
  FQuery.getCampo(FCampo).getValor(FValor).getDataInicial(FDataInicial)
    .getDataFinal(FDataFinal).sqlPesquisaData(FTabela);
end;

function TEntity.sqlPesquisaEstatica: iEntity;
begin
  result := self;
  FQuery.getCampo(FCampo).getValor(FValor).getDataInicial(FDataInicial)
    .getDataFinal(FDataFinal).sqlPesquisaEstatica(FTabela);
end;

procedure TEntity.validarData(componet: tmaskEdit);
var
  d: TDate;
begin
  try
    d := strtodate(componet.Text);
  except
    componet.SetFocus;
    componet.Clear;
    raise exception.create('Digite uma data válida.');
  end;
end;

end.
