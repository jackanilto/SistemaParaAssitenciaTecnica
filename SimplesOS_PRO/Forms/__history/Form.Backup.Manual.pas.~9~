unit Form.Backup.Manual;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Buttons, Vcl.ExtCtrls,
  UClasse.Config.BackUp;

type
  TformBackUpManual = class(TForm)
    Panel1: TPanel;
    sbFechar: TSpeedButton;
    lblCaption: TLabel;
    Panel2: TPanel;
    edtLocalBaseDeDados: TEdit;
    edtLocalSalvarArquivo: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    SpeedButton1: TSpeedButton;
    sbIniciarBackup: TSpeedButton;
    sbCancelar: TSpeedButton;
    procedure sbFecharClick(Sender: TObject);
    procedure Panel1MouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure FormShow(Sender: TObject);
    procedure sbIniciarBackupClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
  private
    { Private declarations }
    var
      FBackup: TClasseConfigBackUp;
  public
    { Public declarations }
  end;

var
  formBackUpManual: TformBackUpManual;

implementation

{$R *.dfm}

procedure TformBackUpManual.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  FreeAndNil(FBackup);
end;

procedure TformBackUpManual.FormCreate(Sender: TObject);
begin
  FBackup := TClasseConfigBackUp.create;
end;

procedure TformBackUpManual.FormShow(Sender: TObject);
begin
  lblCaption.Caption := formBackUpManual.Caption;
end;

procedure TformBackUpManual.Panel1MouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
const
  SC_DRAGMOVE = $F012;
begin
  if Button = mbleft then
  begin
    ReleaseCapture;
    self.Perform(WM_SYSCOMMAND, SC_DRAGMOVE, 0);
  end;
end;

procedure TformBackUpManual.sbFecharClick(Sender: TObject);
begin
  Close;
end;

procedure TformBackUpManual.sbIniciarBackupClick(Sender: TObject);
begin
  try
    Self.Cursor := crHourGlass;

    FBackUp.localBancoDeDados := edtLocalBaseDeDados.Text;
    FBackUp.destinoDoBackUP := edtSalvarBaseDeDados.Text;

    FBackUp.iniciarBackUP;

    Self.Cursor := crDefault;
  except
    on e: exception do
    begin
      Self.Cursor := crDefault;
      raise exception.create
        ('Ocorreu um erro ao tentar efetuar o backup do banco de dados. ' +
        e.Message);
    end;
  end;
end;

end.
