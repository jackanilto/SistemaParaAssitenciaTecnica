unit UClasse.Relatorio.Retirada.Valores;

interface

uses UClasse.Query, UInterfaces, UDados.Conexao, Data.DB, Vcl.Dialogs,
  System.SysUtils, Vcl.Forms, Winapi.Windows, Vcl.Controls,
  UClasse.Gravar.Log.Sistema, Vcl.ComCtrls, Vcl.DBGrids, Vcl.Mask;

type

  TRelatorioRetiradaValores = class(TInterfacedObject, iRelatorioRetiradaDeValores)
  private

    FQuery: iConexaoQuery;
    FGravarLog: iGravarLogOperacoes;
    FTabela: string;
    FCampo: string;
    FValor: string;
    FDataInicial: TDate;
    FDataFinal: TDate;

    FCodigo: integer;
    FNome: string;

  public

    function nomeTabela(value: string): iRelatorioRetiradaDeValores;
    function getCampo(value: string): iRelatorioRetiradaDeValores;
    function getValor(value: string): iRelatorioRetiradaDeValores;
    function getDataInicial(value: TDate): iRelatorioRetiradaDeValores;
    function getDataFinal(value: TDate): iRelatorioRetiradaDeValores;
    function open(value: string): iRelatorioRetiradaDeValores;
    function pesquisar: iRelatorioRetiradaDeValores;
    function ExecSql: iRelatorioRetiradaDeValores;
    function sqlPesquisa: iRelatorioRetiradaDeValores;
    function sqlPesquisaData: iRelatorioRetiradaDeValores;
    function sqlPesquisaEstatica: iRelatorioRetiradaDeValores;

    function abrir: iRelatorioRetiradaDeValores;
    function atualizar: iRelatorioRetiradaDeValores;
    function cancelar: iRelatorioRetiradaDeValores;
    function fecharQuery: iRelatorioRetiradaDeValores;
    function listarGrid(value: TDataSource): iRelatorioRetiradaDeValores;
    function ordenarGrid(column: TColumn): iRelatorioRetiradaDeValores;

    function exportar: iRelatorioRetiradaDeValores;
    function validarData(componet: tmaskEdit):iRelatorioRetiradaDeValores;

    constructor create;
    destructor destroy; override;
    class function new: iRelatorioRetiradaDeValores;
  end;

implementation

{ TRelatorioRetiradaValores }

function TRelatorioRetiradaValores.abrir: iRelatorioRetiradaDeValores;
begin

  result := self;
  FQuery.Query(FTabela);

end;

function TRelatorioRetiradaValores.atualizar: iRelatorioRetiradaDeValores;
begin
  result := self;
  FQuery.TQuery.Refresh;
end;

function TRelatorioRetiradaValores.cancelar: iRelatorioRetiradaDeValores;
begin
  FQuery.TQuery.Cancel;
  // FQuery.TQuery.close;
end;

constructor TRelatorioRetiradaValores.create;
begin
  FTabela := 'PRODUTOS';
  FQuery := TConexaoQuery.new.Query(FTabela);

  FGravarLog := TGravarLogSistema.new;
  FGravarLog.getJanela('Cadastro de produtos').getCodigoFuncionario
    (funcionarioLogado);
  // (0 { definir o usuário quando construir a aplicação } );

end;

destructor TRelatorioRetiradaValores.destroy;
begin

  inherited;
end;

function TRelatorioRetiradaValores.editar: iRelatorioRetiradaDeValores;
begin
  result := self;
  if FQuery.TQuery.RecordCount >= 1 then
  begin

    FGravarLog.getNomeRegistro(FQuery.TQuery.FieldByName('SERVICO_PRODUTO')
      .AsString).getCodigoRegistro(FQuery.TQuery.FieldByName('id').AsInteger)
      .gravarLog;

    FQuery.TQuery.Edit;

  end;
end;

function TRelatorioRetiradaValores.ExecSql: iRelatorioRetiradaDeValores;
begin
  result := self;
  FQuery.ExecSql(FTabela);
end;

function TRelatorioRetiradaValores.exportar: iRelatorioRetiradaDeValores;
begin
  result := self;
end;

function TRelatorioRetiradaValores.fecharQuery: iRelatorioRetiradaDeValores;
begin
  FQuery.TQuery.close;
end;

function TRelatorioRetiradaValores.getCampo(value: string): iRelatorioRetiradaDeValores;
begin
  result := self;
  FCampo := value;
end;

function TRelatorioRetiradaValores.getCodigo(value: integer): iRelatorioRetiradaDeValores;
begin
  result := self;
  FCodigo := value;
end;

function TRelatorioRetiradaValores.getDataFinal(value: TDate): iRelatorioRetiradaDeValores;
begin
  result := self;
  FDataFinal := value;
  // FQuery.getDataFinal(value);
end;

function TRelatorioRetiradaValores.getDataInicial(value: TDate): iRelatorioRetiradaDeValores;
begin
  result := self;
  FDataInicial := value;
  // FQuery.getDataInicial(value);
end;

function TRelatorioRetiradaValores.getNome(value: string): iRelatorioRetiradaDeValores;
begin
  result := self;
  FNome := value;
end;

function TRelatorioRetiradaValores.getValor(value: string): iRelatorioRetiradaDeValores;
begin
  result := self;
  FValor := UpperCase(value);
end;

function TRelatorioRetiradaValores.listarGrid(value: TDataSource): iRelatorioRetiradaDeValores;
begin

  result := self;

  FQuery.TQuery.FieldByName('id').DisplayLabel := 'Código';
  FQuery.TQuery.FieldByName('grupo').DisplayLabel := 'Grupo';
  FQuery.TQuery.FieldByName('grupo').DisplayWidth := 50;

  value.DataSet := FQuery.TQuery;

end;

class function TRelatorioRetiradaValores.new: iRelatorioRetiradaDeValores;
begin
  result := self.create;
end;

function TRelatorioRetiradaValores.nomeTabela(value: string): iRelatorioRetiradaDeValores;
begin
  result := self;
  FTabela := value;
end;

function TRelatorioRetiradaValores.open(value: string): iRelatorioRetiradaDeValores;
begin
  FQuery.Query(FTabela);
end;

function TRelatorioRetiradaValores.ordenarGrid(column: TColumn): iRelatorioRetiradaDeValores;
begin

  if FQuery.TQuery.IndexFieldNames = column.FieldName then
    FQuery.TQuery.IndexFieldNames := column.FieldName + ':D'
  else
    FQuery.TQuery.IndexFieldNames := column.FieldName;

end;

function TRelatorioRetiradaValores.pesquisar: iRelatorioRetiradaDeValores;
begin
  result := self;
end;

function TRelatorioRetiradaValores.sqlPesquisa: iRelatorioRetiradaDeValores;
begin
  result := self;
  FQuery.getCampo(FCampo).getValor(FValor).sqlPesquisa(FTabela);
end;

function TRelatorioRetiradaValores.sqlPesquisaData: iRelatorioRetiradaDeValores;
begin
  result := self;
  FQuery.getCampo(FCampo).getValor(FValor).getDataInicial(FDataInicial)
    .getDataFinal(FDataFinal).sqlPesquisaData(FTabela);
end;

function TRelatorioRetiradaValores.sqlPesquisaEstatica: iRelatorioRetiradaDeValores;
begin
  result := self;
  FQuery.getCampo(FCampo).getValor(FValor).getDataInicial(FDataInicial)
    .getDataFinal(FDataFinal).sqlPesquisaEstatica(FTabela);
end;

function TRelatorioRetiradaValores.validarData(componet: tmaskEdit):iRelatorioRetiradaDeValores;
var
  d: TDate;
begin

  result := self;

  try
    d := strtodate(componet.Text);
  except
    componet.SetFocus;
    componet.Clear;
    raise exception.create('Digite uma data válida.');
  end;
end;

end.
