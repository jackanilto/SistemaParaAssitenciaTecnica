unit UClasse.Demo;

interface

uses system.SysUtils, FireDAC.Stan.Intf,
     FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf,
     FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
     FireDAC.Phys, FireDAC.VCLUI.Wait, FireDAC.Stan.ExprFuncs,
     FireDAC.Phys.SQLiteDef, FireDAC.Phys.SQLite, FireDAC.Comp.UI,
     FireDAC.Comp.Client, Vcl.Forms, Vcl.Dialogs, UClasse.Cript.password,
  UInterfaces, UClasse.DiasMeses;

type
    TClasseDemo = class

    private

    function Crypt(Action, Src: String; keychar:string): String;

    var
      FCriptografia: iCriptPasss;
      FDiasMeses: TCalcularDiaMeses;
      FInitialFile:TDate;
      FInitialBD:TDate;
      FDemo:Boolean;
      FQueryFile: TFDQuery;

    const
      INITIALkEYFILE = 'jhgfd12355dssed-et3';
      INITIALKEYBD = 'lopty478ds';
      KEYPOSTFILE = 'DFASDFGQWERHJKLRTYUIOPZXMNCBVAASDSSPPOKJH';
      KEYPOSTBD = 'SADFQGWERHJKLRTYUIOPZXMNCBVAASDSSPPOUIP';

    procedure ativarDemo;
    public

    procedure demoActive(value:boolean);

    procedure gravarInformacoesArquivo;
    procedure gravarInformacoesBD;

    procedure validarInformacoes;

    constructor create;
    destructor destroy; override;

    end;

implementation

{ TClasseDemo }

uses UDados.Conexao,  Form.Principal;

procedure TClasseDemo.ativarDemo;
begin

end;

constructor TClasseDemo.create;
begin

  FCriptografia := TCriptPass.new;

  FQueryFile := TFDQuery.Create(nil);

  FQueryFile.Connection := DataModule1.conexao;

  FQueryFile.Active := false;
  FQueryFile.SQL.Clear;
  FQueryFile.Open('select * from AUXILIAR');
  FQueryFile.Active := true;



end;

function TClasseDemo.Crypt(Action, Src, keychar: string): String;
Label Fim;
var
  KeyLen: Integer;
  KeyPos: Integer;
  OffSet: Integer;
  Dest, Key: String;
  SrcPos: Integer;
  SrcAsc: Integer;
  TmpSrcAsc: Integer;
  Range: Integer;
begin
  if (Src = '') Then
  begin
    Result := '';
    Goto Fim;
  end;
  Key := keychar;
  Dest := '';
  KeyLen := Length(Key);
  KeyPos := 0;
  SrcPos := 0;
  SrcAsc := 0;
  Range := 256;
  if (Action = UpperCase('C')) then
  begin
    Randomize;
    OffSet := Random(Range);
    Dest := Format('%1.2x', [OffSet]);
    for SrcPos := 1 to Length(Src) do
    begin
      Application.ProcessMessages;
      SrcAsc := (Ord(Src[SrcPos]) + OffSet) Mod 255;
      if KeyPos < KeyLen then
        KeyPos := KeyPos + 1
      else
        KeyPos := 1;

      SrcAsc := SrcAsc Xor Ord(Key[KeyPos]);
      Dest := Dest + Format('%1.2x', [SrcAsc]);
      OffSet := SrcAsc;
    end;
  end
  Else if (Action = UpperCase('D')) then
  begin
    OffSet := StrToInt('$' + copy(Src, 1, 2));
    // <--------------- adiciona o $ entra as aspas simples
    SrcPos := 3;
    repeat
      SrcAsc := StrToInt('$' + copy(Src, SrcPos, 2));
      // <--------------- adiciona o $ entra as aspas simples
      if (KeyPos < KeyLen) Then
        KeyPos := KeyPos + 1
      else
        KeyPos := 1;
      TmpSrcAsc := SrcAsc Xor Ord(Key[KeyPos]);
      if TmpSrcAsc <= OffSet then
        TmpSrcAsc := 255 + TmpSrcAsc - OffSet
      else
        TmpSrcAsc := TmpSrcAsc - OffSet;
      Dest := Dest + Chr(TmpSrcAsc);
      OffSet := SrcAsc;
      SrcPos := SrcPos + 2;
    until (SrcPos >= Length(Src));
  end;
  Result := Dest;
Fim:
end;
procedure TClasseDemo.demoActive(value: boolean);
var
  data:TDate;
begin

  FDemo := value;

  if value = true then
    MessageDlg('Esta é um versão de demonstração com validade de 30 dias', mtInformation, [mbOK], 0, mbOK);

  if FQueryFile.FieldByName('KEY_WORD').AsString <> INITIALkEYFILE then
  begin

    if FQueryFile.FieldByName('KEY_WORD').AsString = FCriptografia.md5('Demonstração ativada standart') then
    begin

      try

       data := StrToDate(Crypt('D', FQueryFile.FieldByName('KEY_INITIAL').AsString, KEYPOSTFILE));

       if ((date-data) > 30) then
       begin
        MessageDlg('Seu período de teste acabou. Compre agora mesmo um licença no site www.criosoftware.com.br',
          mtWarning, [mbOK], 0, mbOK);


      except on e:exception do
      begin
        MessageDlg('ERRO! er02 ', mtWarning, [mbOK], 0, mbOK);
        application.Terminate;
      end;

      end;


    end
    else
    begin
      MessageDlg('ERRO! er01', mtWarning, [mbOK], 0, mbOK);
      application.Terminate;
    end;


  end
  else
  begin

  try

    FQueryFile.Edit;

    FQueryFile.FieldByName('KEY_WORD').AsString :=   FCriptografia.md5('Demonstração ativada standart');
    FQueryFile.FieldByName('KEY_INITIAL').AsString := Crypt('C', DateToStr(Date), KEYPOSTFILE);

    FQueryFile.Post;

  except
    raise Exception.Create('ERRO! Arquivo parece estar danificado');

  end;


  end;


//  ShowMessage(FQueryFile.FieldByName('key_word').AsString);

end;

destructor TClasseDemo.destroy;
begin
  FreeAndNil(FQueryFile);
  inherited;
end;

procedure TClasseDemo.gravarInformacoesArquivo;
begin

end;

procedure TClasseDemo.gravarInformacoesBD;
begin

end;

procedure TClasseDemo.validarInformacoes;
begin

end;

end.
