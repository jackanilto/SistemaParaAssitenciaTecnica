unit UClasse.Relatorio.Movimentacao.Caixa;

interface

uses UClasse.Query, UInterfaces, UDados.Conexao, Data.DB, Vcl.Dialogs,
  System.SysUtils, Vcl.Forms, Winapi.Windows, Vcl.Controls,
  UClasse.Gravar.Log.Sistema, Vcl.ComCtrls, Vcl.DBGrids, Vcl.Mask;

type

  TEntity = class(TInterfacedObject, iEntity)
  private

    FQuery: iConexaoQuery;
    FGravarLog: iGravarLogOperacoes;
    FTabela: string;
    FCampo: string;
    FValor: string;
    FDataInicial: TDate;
    FDataFinal: TDate;

    FCodigo: integer;
    FNome: string;

  public

    function nomeTabela(value: string): iRelatorioMovimentacaoCaixa;
    function getCampo(value: string): iRelatorioMovimentacaoCaixa;
    function getValor(value: string): iRelatorioMovimentacaoCaixa;
    function getDataInicial(value: TDate): iRelatorioMovimentacaoCaixa;
    function getDataFinal(value: TDate): iRelatorioMovimentacaoCaixa;
    function open(value: string): iRelatorioMovimentacaoCaixa;
    function pesquisar: iRelatorioMovimentacaoCaixa;
    function ExecSql: iRelatorioMovimentacaoCaixa;
    function sqlPesquisa: iRelatorioMovimentacaoCaixa;
    function sqlPesquisaData: iRelatorioMovimentacaoCaixa;
    function sqlPesquisaEstatica: iRelatorioMovimentacaoCaixa;
    function SelectSql(value: string): iRelatorioMovimentacaoCaixa;

    function abrir: iRelatorioMovimentacaoCaixa;
    function atualizar: iRelatorioMovimentacaoCaixa;
    function cancelar: iRelatorioMovimentacaoCaixa;
    function fecharQuery: iRelatorioMovimentacaoCaixa;
    function listarGrid(value: TDataSource): iRelatorioMovimentacaoCaixa;
    function ordenarGrid(column: TColumn): iRelatorioMovimentacaoCaixa;

    function exportar: iRelatorioMovimentacaoCaixa;
    function validarData(componet: tmaskEdit):iRelatorioMovimentacaoCaixa;

    function selecionarParcelasOrdemData(data1, data2:TDate):iRelatorioMovimentacaoCaixa;
    function retornarTotal:Currency;

    constructor create;
    destructor destroy; override;
    class function new: iEntity;
  end;

implementation

{ TEntity }

function TEntity.abrir: iEntity;
begin

  result := self;
  FQuery.Query(FTabela);

end;

function TEntity.atualizar: iEntity;
begin
  result := self;
  FQuery.TQuery.Refresh;
end;

function TEntity.cancelar: iEntity;
begin
  FQuery.TQuery.Cancel;
  // FQuery.TQuery.close;
end;

constructor TEntity.create;
begin
  FTabela := 'CAIXA_ABER_FECH';
  FQuery := TConexaoQuery.new.Query(FTabela);

  FGravarLog := TGravarLogSistema.new;
  FGravarLog.getJanela('Movimentação de caixa - Caixa').getCodigoFuncionario
    (funcionarioLogado);
  // (0 { definir o usuário quando construir a aplicação } );

end;


destructor TEntity.destroy;
begin

  inherited;
end;

function TEntity.ExecSql: iEntity;
begin
  result := self;
  FQuery.ExecSql(FTabela);
end;

function TEntity.exportar: iEntity;
begin
  result := self;
end;

function TEntity.fecharQuery: iEntity;
begin
  FQuery.TQuery.close;
end;

function TEntity.getCampo(value: string): iEntity;
begin
  result := self;
  FCampo := value;
end;

function TEntity.getDataFinal(value: TDate): iEntity;
begin
  result := self;
  FDataFinal := value;
  // FQuery.getDataFinal(value);
end;

function TEntity.getDataInicial(value: TDate): iEntity;
begin
  result := self;
  FDataInicial := value;
  // FQuery.getDataInicial(value);
end;

function TEntity.getValor(value: string): iEntity;
begin
  result := self;
  FValor := UpperCase(value);
end;

function TEntity.listarGrid(value: TDataSource): iEntity;
begin

  result := self;

  FQuery.TQuery.FieldByName('id').DisplayLabel := 'Código';
  FQuery.TQuery.FieldByName('grupo').DisplayLabel := 'Grupo';
  FQuery.TQuery.FieldByName('grupo').DisplayWidth := 50;

  value.DataSet := FQuery.TQuery;

end;

class function TEntity.new: iEntity;
begin
  result := self.create;
end;

function TEntity.nomeTabela(value: string): iEntity;
begin
  result := self;
  FTabela := value;
end;

function TEntity.open(value: string): iEntity;
begin
  FQuery.Query(FTabela);
end;

function TEntity.ordenarGrid(column: TColumn): iEntity;
begin

  if FQuery.TQuery.IndexFieldNames = column.FieldName then
    FQuery.TQuery.IndexFieldNames := column.FieldName + ':D'
  else
    FQuery.TQuery.IndexFieldNames := column.FieldName;

end;

function TEntity.pesquisar: iEntity;
begin
  result := self;
end;

function TEntity.retornarTotal: Currency;
begin

  result := 0;

  FQuery.TQuery.First;

  result := FQuery.TQuery.FieldByName('VALOR_INFORMADO').AsCurrency;

end;

function TEntity.selecionarParcelasOrdemData(data1,
  data2: TDate): iRelatorioMovimentacaoCaixa;
begin

  result := self;

  with FQuery do
  begin

    TQuery.Active := false;
    TQuery.SQL.Clear;
    TQuery.SQL.Add('SELECT * FROM CAIXA_ABER_FECH WHERE DATA_ABERTURA BETWEEN :D1 AND D2 ORDE BY DESC ID');
    TQuery.ParamByName('D1').AsDate := data1;
    TQuery.ParamByName('D2').AsDate := data2;
    TQuery.Active := true;

  end;

end;

function TEntity.SelectSql(value: string): iRelatorioMovimentacaoCaixa;
begin

end;

function TEntity.sqlPesquisa: iEntity;
begin
  result := self;
  FQuery.getCampo(FCampo).getValor(FValor).sqlPesquisa(FTabela);
end;

function TEntity.sqlPesquisaData: iEntity;
begin
  result := self;
  FQuery.getCampo(FCampo).getValor(FValor).getDataInicial(FDataInicial)
    .getDataFinal(FDataFinal).sqlPesquisaData(FTabela);
end;

function TEntity.sqlPesquisaEstatica: iEntity;
begin
  result := self;
  FQuery.getCampo(FCampo).getValor(FValor).getDataInicial(FDataInicial)
    .getDataFinal(FDataFinal).sqlPesquisaEstatica(FTabela);
end;

procedure TEntity.validarData(componet: tmaskEdit);
var
  d: TDate;
begin
  try
    d := strtodate(componet.Text);
  except
    componet.SetFocus;
    componet.Clear;
    raise exception.create('Digite uma data válida.');
  end;
end;

end.
