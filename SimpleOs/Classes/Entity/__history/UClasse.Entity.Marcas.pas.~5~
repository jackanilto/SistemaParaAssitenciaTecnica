unit UClasse.Entity.Marcas;

interface

uses UClasse.Query, UInterfaces, UDados.Conexao, Data.DB,
  FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf,
  FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
  FireDAC.Phys, FireDAC.VCLUI.Wait, FireDAC.Comp.Client, Vcl.Dialogs,
  System.SysUtils, Vcl.Forms, Winapi.Windows, Vcl.Controls,
  UClasse.Gravar.Log.Sistema, Vcl.ComCtrls, Vcl.DBGrids;

type

  TEntityMarcas = class(TInterfacedObject, iClasseCadastroMarcas)
  private

    FQuery: iConexaoQuery;
    FEntityQuery: TFDQuery;
    FGravarLog: iGravarLogOperacoes;
    FTabela: string;
    FCampo: string;
    FValor: string;
    FDataInicial: TDate;
    FDataFinal: TDate;

    FCodigo: integer;
    FNome: string;

  public

    function getCampo(value: string): iClasseCadastroMarcas;
    function getValor(value: string): iClasseCadastroMarcas;
    function getDataInicial(value: TDate): iClasseCadastroMarcas;
    function getDataFinal(value: TDate): iClasseCadastroMarcas;
    function open(value: string): iClasseCadastroMarcas;
    function pesquisar: iClasseCadastroMarcas;
    function ExecSql: iClasseCadastroMarcas;
    function sqlPesquisa: iClasseCadastroMarcas;
    function sqlPesquisaData: iClasseCadastroMarcas;
    function sqlPesquisaEstatica: iClasseCadastroMarcas;

    function abrir: iClasseCadastroMarcas;
    function inserir: iClasseCadastroMarcas;
    function Gravar: iClasseCadastroMarcas;
    function deletar: iClasseCadastroMarcas;
    function atualizar: iClasseCadastroMarcas;
    function editar: iClasseCadastroMarcas;
    function cancelar: iClasseCadastroMarcas;
    function fecharQuery: iClasseCadastroMarcas;
    function codigoCadastro(sp: string): integer;
    function listarGrid(value: TDataSource): iClasseCadastroMarcas;
    function ordenarGrid(column: TColumn): iClasseCadastroMarcas;

    function getCodigo(value: integer): iClasseCadastroMarcas;
    function getMarca(value: string): iClasseCadastroMarcas;

    constructor create;
    destructor destroy; override;
    class function new: iClasseCadastroMarcas;
  end;

implementation

{ TEntityMarcas }

function TEntityMarcas.abrir: iClasseCadastroMarcas;
begin

  result := self;
  FQuery.Query(FTabela);

end;

function TEntityMarcas.atualizar: iClasseCadastroMarcas;
begin
  result := self;
  FQuery.TQuery.Refresh;
end;

function TEntityMarcas.cancelar: iClasseCadastroMarcas;
begin
  FQuery.TQuery.Cancel;
  FQuery.TQuery.close;
end;

function TEntityMarcas.codigoCadastro(sp: string): integer;
begin
  result := FQuery.codigoCadastro('');
end;

constructor TEntityMarcas.create;
begin
  FTabela := 'Grupos';
  FQuery := TConexaoQuery.new.Query(FTabela);

  FGravarLog := TGravarLogSistema.new;
  FGravarLog.getJanela('Grupos').getCodigoFuncionario(funcionarioLogado);
  // (0 { definir o usuário quando construir a aplicação } );

end;

function TEntityMarcas.deletar: iClasseCadastroMarcas;
begin
  result := self;

  if FQuery.TQuery.RecordCount >= 1 then
  begin
    if application.MessageBox('Deseja realmente excluir este registro?',
      'Pergunta do sistema!', MB_YESNO + MB_ICONQUESTION) = mryes then
    begin

      FGravarLog.getNomeRegistro(FQuery.TQuery.FieldByName('grupo').AsString)
        .getCodigoRegistro(FQuery.TQuery.FieldByName('id').AsInteger).gravarLog;

      FQuery.TQuery.Delete;
    end;
  end;

end;

destructor TEntityMarcas.destroy;
begin

  inherited;
end;

function TEntityMarcas.editar: iClasseCadastroMarcas;
begin
  result := self;
  if FQuery.TQuery.RecordCount >= 1 then
  begin

    FGravarLog.getNomeRegistro(FQuery.TQuery.FieldByName('grupo').AsString)
      .getCodigoRegistro(FQuery.TQuery.FieldByName('id').AsInteger).gravarLog;

    FQuery.TQuery.Edit;
    FQuery.TQuery.FieldByName('grupo').AsString := FValor;
    FQuery.TQuery.Post;
    showmessage('Operação realizada com sucesso!');
  end;
end;

function TEntityMarcas.ExecSql: iClasseCadastroMarcas;
begin
  result := self;
  FQuery.ExecSql(FTabela);
end;

function TEntityMarcas.fecharQuery: iClasseCadastroMarcas;
begin
  FQuery.TQuery.close;
end;

function TEntityMarcas.getCampo(value: string): iClasseCadastroMarcas;
begin
  result := self;
  FQuery.getCampo(value);
end;

function TEntityMarcas.getCodigo(value: integer): iClasseCadastroMarcas;
begin
  result := self;
  FCodigo := value;
end;

function TEntityMarcas.getDataFinal(value: TDate): iClasseCadastroMarcas;
begin
  result := self;
  FQuery.getDataFinal(value);
end;

function TEntityMarcas.getDataInicial(value: TDate): iClasseCadastroMarcas;
begin
  result := self;
  FQuery.getDataInicial(value);
end;

function TEntityMarcas.getMarca(value: string): iClasseCadastroMarcas;
begin
  result := self;
  FNome := value;
end;

function TEntityMarcas.getValor(value: string): iClasseCadastroMarcas;
begin
  result := self;
  FQuery.getValor(value);
end;

function TEntityMarcas.Gravar: iClasseCadastroMarcas;
begin

  result := self;

  if FQuery.TQuery.State in [dsInsert] then
    FQuery.TQuery.FieldByName('id').AsInteger :=
      FQuery.codigoCadastro('SP_GEN_GRUPOS_ID');

  FQuery.TQuery.FieldByName('grupo').AsString := FNome;

  FGravarLog.getNomeRegistro(FQuery.TQuery.FieldByName('grupo').AsString)
    .getCodigoRegistro(FQuery.TQuery.FieldByName('id').AsInteger).gravarLog;

  try
    FQuery.TQuery.Post;
    showmessage('Operação realizada com sucesso!');
  except
    on e: exception do
    begin
      raise exception.create('Erro ao tentar gravar os dados. ' + e.Message);
    end;

  end;

end;

function TEntityMarcas.inserir: iClasseCadastroMarcas;
begin
  result := self;
  FQuery.TQuery.EmptyDataSet;
  FQuery.TQuery.Append;
end;

function TEntityMarcas.listarGrid(value: TDataSource): iClasseCadastroMarcas;
begin

  result := self;

  FQuery.TQuery.FieldByName('id').DisplayLabel := 'Código';
  FQuery.TQuery.FieldByName('grupo').DisplayLabel := 'Grupo';
  FQuery.TQuery.FieldByName('grupo').DisplayWidth := 50;

  // FQuery.TQuery.SQL.Add('order by id desc');

  value.DataSet := FQuery.TQuery;

end;

class function TEntityMarcas.new: iClasseCadastroMarcas;
begin
  result := self.create;
end;

function TEntityMarcas.open(value: string): iClasseCadastroMarcas;
begin
  FQuery.Query(FTabela);
end;

function TEntityMarcas.ordenarGrid(column: TColumn): iClasseCadastroMarcas;
begin

  if FQuery.TQuery.IndexFieldNames = column.FieldName then
    FQuery.TQuery.IndexFieldNames := column.FieldName + ':D'
  else
    FQuery.TQuery.IndexFieldNames := column.FieldName;

end;

function TEntityMarcas.pesquisar: iClasseCadastroMarcas;
begin
  result := self;
end;

function TEntityMarcas.sqlPesquisa: iClasseCadastroMarcas;
begin
  result := self;
  FQuery.getCampo(FCampo).getValor(FValor).sqlPesquisa(FTabela);
end;

function TEntityMarcas.sqlPesquisaData: iClasseCadastroMarcas;
begin
  result := self;
  FQuery.getCampo(FCampo).getValor(FValor).getDataInicial(FDataInicial)
    .getDataFinal(FDataFinal).sqlPesquisaData(FTabela);
end;

function TEntityMarcas.sqlPesquisaEstatica: iClasseCadastroMarcas;
begin
  result := self;
  FQuery.getCampo(FCampo).getValor(FValor).getDataInicial(FDataInicial)
    .getDataFinal(FDataFinal).sqlPesquisaEstatica(FTabela);
end;

end.
