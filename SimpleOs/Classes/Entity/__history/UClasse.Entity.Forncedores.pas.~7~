unit UClasse.Entity.Forncedores;

interface

uses UClasse.Query, UInterfaces, UDados.Conexao, Data.DB,
  FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Error, FireDAC.UI.Intf,
  FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool, FireDAC.Stan.Async,
  FireDAC.Phys, FireDAC.VCLUI.Wait, FireDAC.Comp.Client, Vcl.Dialogs,
  System.SysUtils, Vcl.Forms, Winapi.Windows, Vcl.Controls,
  UClasse.Gravar.Log.Sistema, Vcl.ComCtrls, Vcl.DBGrids;

type

  TEntity = class(TInterfacedObject, iEntity)
  private

    FQuery: iConexaoQuery;
    FEntityQuery: TFDQuery;
    FGravarLog: iGravarLogOperacoes;
    FTabela: string;
    FCampo: string;
    FValor: string;
    FDataInicial: TDate;
    FDataFinal: TDate;

    FCodigo: integer;
    FNome: string;

    FID: integer;
    FNOME_FANTASIA: string;
    FRAZAO_SOCIAL: string;
    FCPF_CNPJ: string;
    FINSCRICAO_ESTADUAL: string;
    FENDERECO: string;
    FBAIRRO: string;
    FNUMERO: integer;
    FCOMPLEMENTO: string;
    FCEP: string;
    FCIDADE: string;
    FUF: string;
    FTELEFONE: string;
    FCELULAR: string;
    FEMAIL: string;
    FRESPONSAVEL: string;
    F_FUINCIONARIO: string;
    FOBSERVACAO: string;

    function getNome(value: string): iEntity;

  public

    function nomeTabela(value: string): iEntity;
    function getCampo(value: string): iEntity;
    function getValor(value: string): iEntity;
    function getDataInicial(value: TDate): iEntity;
    function getDataFinal(value: TDate): iEntity;
    function open(value: string): iEntity;
    function pesquisar: iEntity;
    function ExecSql: iEntity;
    function sqlPesquisa: iEntity;
    function sqlPesquisaData: iEntity;
    function sqlPesquisaEstatica: iEntity;

    function abrir: iEntity;
    function inserir: iEntity;
    function Gravar: iEntity;
    function deletar: iEntity;
    function atualizar: iEntity;
    function editar: iEntity;
    function cancelar: iEntity;
    function fecharQuery: iEntity;
    function codigoCadastro(sp: string): integer;
    function listarGrid(value: TDataSource): iEntity;
    function ordenarGrid(column: TColumn): iEntity;

    function getCodigo(value: integer): iCadastroFornecedores;
    function getNomeFantasia(value: string): iCadastroFornecedores;
    function getRazaoSocial(value: string): iCadastroFornecedores;
    function getCPFCNPJ(value: string): iCadastroFornecedores;
    function getInscricaoEstadual(value: string): iCadastroFornecedores;
    function getEndereco(value: string): iCadastroFornecedores;
    function getBairro(value: string): iCadastroFornecedores;
    function getNumero(value: integer): iCadastroFornecedores;
    function getComplemento(value: string): iCadastroFornecedores;
    function getCep(value: string): iCadastroFornecedores;
    function getCidade(value: string): iCadastroFornecedores;
    function getEstado(value: string): iCadastroFornecedores;
    function getTelefone(value: string): iCadastroFornecedores;
    function getCelular(value: string): iCadastroFornecedores;
    function getEmail(value: string): iCadastroFornecedores;
    function getFuncionario(value: integer): iCadastroFornecedores;
    function getResponsavel(value: string): iCadastroFornecedores;
    function getObservacao(value: string): iCadastroFornecedores;
    function exportar: iCadastroFornecedores;

    constructor create;
    destructor destroy; override;
    class function new: iEntity;
  end;

implementation

{ TEntity }

function TEntity.abrir: iEntity;
begin

  result := self;
  FQuery.Query(FTabela);

end;

function TEntity.atualizar: iEntity;
begin
  result := self;
  FQuery.TQuery.Refresh;
end;

function TEntity.cancelar: iEntity;
begin
  FQuery.TQuery.Cancel;
  FQuery.TQuery.close;
end;

function TEntity.codigoCadastro(sp: string): integer;
begin
  result := FQuery.codigoCadastro('');
end;

constructor TEntity.create;
begin
  FTabela := 'FORNECEDORES';
  FQuery := TConexaoQuery.new.Query(FTabela);

  FGravarLog := TGravarLogSistema.new;
  FGravarLog.getJanela('Forncedores').getCodigoFuncionario(funcionarioLogado);
  // (0 { definir o usuário quando construir a aplicação } );

end;

function TEntity.deletar: iEntity;
begin
  result := self;

  if FQuery.TQuery.RecordCount >= 1 then
  begin
    if application.MessageBox('Deseja realmente excluir este registro?',
      'Pergunta do sistema!', MB_YESNO + MB_ICONQUESTION) = mryes then
    begin

      FGravarLog.getNomeRegistro(FQuery.TQuery.FieldByName('NOME_FANTASIA')
        .AsString).getCodigoRegistro(FQuery.TQuery.FieldByName('id').AsInteger)
        .gravarLog;

      FQuery.TQuery.Delete;
    end;
  end;

end;

destructor TEntity.destroy;
begin

  inherited;
end;

function TEntity.editar: iEntity;
begin
  result := self;
  if FQuery.TQuery.RecordCount >= 1 then
  begin

    FGravarLog.getNomeRegistro(FQuery.TQuery.FieldByName('NOME_FANTASIA')
      .AsString).getCodigoRegistro(FQuery.TQuery.FieldByName('id').AsInteger)
      .gravarLog;

    FQuery.TQuery.Edit;

  end;
end;

function TEntity.ExecSql: iEntity;
begin
  result := self;
  FQuery.ExecSql(FTabela);
end;

function TEntity.exportar: iCadastroFornecedores;
begin
  result := self;
end;

function TEntity.fecharQuery: iEntity;
begin
  FQuery.TQuery.close;
end;

function TEntity.getBairro(value: string): iCadastroFornecedores;
begin
  result := self;
  FBAIRRO := value;
end;

function TEntity.getCampo(value: string): iEntity;
begin
  result := self;
  FCampo := value;
end;

function TEntity.getCelular(value: string): iCadastroFornecedores;
begin
  result := self;
  FCELULAR := value;
end;

function TEntity.getCep(value: string): iCadastroFornecedores;
begin
  result := self;
  FCEP := value;
end;

function TEntity.getCidade(value: string): iCadastroFornecedores;
begin
  result := self;
  FCIDADE := value;
end;

function TEntity.getCodigo(value: integer): iEntity;
begin
  result := self;
  FCodigo := value;
end;

function TEntity.getComplemento(value: string): iCadastroFornecedores;
begin
  result := self;
  FCOMPLEMENTO := value;
end;

function TEntity.getCPFCNPJ(value: string): iCadastroFornecedores;
begin
  result := self;
  FCPF_CNPJ := value;
end;

function TEntity.getDataFinal(value: TDate): iEntity;
begin
  result := self;
  FDataFinal := value;
  // FQuery.getDataFinal(value);
end;

function TEntity.getDataInicial(value: TDate): iEntity;
begin
  result := self;
  FDataInicial := value;
  // FQuery.getDataInicial(value);
end;

function TEntity.getEmail(value: string): iCadastroFornecedores;
begin
  result := self;
  FEMAIL := value;
end;

function TEntity.getEndereco(value: string): iCadastroFornecedores;
begin
  result := self;
  FENDERECO := value;
end;

function TEntity.getEstado(value: string): iCadastroFornecedores;
begin
  result := self;
  FCIDADE := value;
end;

function TEntity.getFuncionario(value: integer): iCadastroFornecedores;
begin
  result := self;
  F_FUINCIONARIO := value;
end;

function TEntity.getInscricaoEstadual(value: string): iCadastroFornecedores;
begin
  result := self;
  FINSCRICAO_ESTADUAL := value;
end;

function TEntity.getNome(value: string): iEntity;
begin
  result := self;
  FNome := value;
end;

function TEntity.getNomeFantasia(value: string): iCadastroFornecedores;
begin
  result := self;
  if value = EmptyStr then
    raise Exception.create('Informe um nome fantasia válido.');
  FNOME_FANTASIA := value;
end;

function TEntity.getNumero(value: integer): iCadastroFornecedores;
begin
  result := self;
  FNUMERO := value;
end;

function TEntity.getObservacao(value: string): iCadastroFornecedores;
begin
  result := self;
  FOBSERVACAO := value;
end;

function TEntity.getRazaoSocial(value: string): iCadastroFornecedores;
begin
  result := self;
  FRAZAO_SOCIAL := value;
end;

function TEntity.getResponsavel(value: string): iCadastroFornecedores;
begin
  result := self;
  FRESPONSAVEL := value;
end;

function TEntity.getTelefone(value: string): iCadastroFornecedores;
begin
  result := self;
  FTELEFONE := value;
end;

function TEntity.getValor(value: string): iEntity;
begin
  result := self;
  FValor := UpperCase(value);
end;

function TEntity.Gravar: iEntity;
begin

  result := self;

  if FQuery.TQuery.State in [dsInsert] then
    FQuery.TQuery.FieldByName('id').AsInteger :=
      FQuery.codigoCadastro('SP_GEN_FORNECEDORES_ID');

  FQuery.TQuery.FieldByName('NOME_FANTASIA').AsString := FNome;

  FQuery.TQuery.FieldByName('NOME_FANTASIA').AsString := FNOME_FANTASIA;
  FQuery.TQuery.FieldByName('RAZAO_SOCIAL').AsString := FRAZAO_SOCIAL;
  FQuery.TQuery.FieldByName('CPF_CNPJ').AsString := FCPF_CNPJ;
  FQuery.TQuery.FieldByName('INSCRICAO_ESTADUAL').AsString :=
    FINSCRICAO_ESTADUAL;
  FQuery.TQuery.FieldByName('ENDERECO').AsString := FENDERECO;
  FQuery.TQuery.FieldByName('BAIRRO').AsString := FBAIRRO;
  FQuery.TQuery.FieldByName('NUMERO').AsInteger := FNUMERO;
  FQuery.TQuery.FieldByName('COMPLEMENTO').AsString := FCOMPLEMENTO;
  FQuery.TQuery.FieldByName('CEP').AsString := FCEP;
  FQuery.TQuery.FieldByName('CIDADE').AsString := FCIDADE;
  FQuery.TQuery.FieldByName('UF').AsString := FUF;
  FQuery.TQuery.FieldByName('TELEFONE').AsString := FTELEFONE;
  FQuery.TQuery.FieldByName('CELULAR').AsString := FCELULAR;
  FQuery.TQuery.FieldByName('EMAIL').AsString := FEMAIL;
  FQuery.TQuery.FieldByName('RESPONSAVEL').AsString := FRESPONSAVEL;
  FQuery.TQuery.FieldByName('FUINCIONARIO_CADASTRO').AsString :=
    funcionarioLogado;
  FQuery.TQuery.FieldByName('OBSERVACAO').AsString := FOBSERVACAO;

  FGravarLog.getNomeRegistro(FQuery.TQuery.FieldByName('NOME_FANTASIA')
    .AsString).getCodigoRegistro(FQuery.TQuery.FieldByName('id').AsInteger)
    .gravarLog;

  try
    FQuery.TQuery.Post;
  except
    on e: Exception do
    begin
      raise Exception.create('Erro ao tentar gravar os dados. ' + e.Message);
    end;

  end;

end;

function TEntity.inserir: iEntity;
begin
  result := self;
  FQuery.TQuery.EmptyDataSet;
  FQuery.TQuery.Append;
end;

function TEntity.listarGrid(value: TDataSource): iEntity;
begin

  result := self;

  FQuery.TQuery.FieldByName('ID')FQuery.TQuery.FieldByName('NOME_FANTASIA')
    FQuery.TQuery.FieldByName('RAZAO_SOCIAL')FQuery.TQuery.FieldByName
    ('CPF_CNPJ')FQuery.TQuery.FieldByName('INSCRICAO_ESTADUAL')
    FQuery.TQuery.FieldByName('ENDERECO')FQuery.TQuery.FieldByName('BAIRRO')
    FQuery.TQuery.FieldByName('NUMERO')FQuery.TQuery.FieldByName('COMPLEMENTO')
    FQuery.TQuery.FieldByName('CEP')FQuery.TQuery.FieldByName('CIDADE')
    FQuery.TQuery.FieldByName('UF')FQuery.TQuery.FieldByName('TELEFONE')
    FQuery.TQuery.FieldByName('CELULAR')FQuery.TQuery.FieldByName('EMAIL')
    FQuery.TQuery.FieldByName('RESPONSAVEL')FQuery.TQuery.FieldByName
    ('FUINCIONARIO_CADASTRO')FQuery.TQuery.FieldByName('OBSERVACAO')

  // FQuery.TQuery.SQL.Add('order by id desc');

    value.DataSet := FQuery.TQuery;

end;

class function TEntity.new: iEntity;
begin
  result := self.create;
end;

function TEntity.nomeTabela(value: string): iEntity;
begin
  result := self;
  FTabela := value;
end;

function TEntity.open(value: string): iEntity;
begin
  FQuery.Query(FTabela);
end;

function TEntity.ordenarGrid(column: TColumn): iEntity;
begin

  if FQuery.TQuery.IndexFieldNames = column.FieldName then
    FQuery.TQuery.IndexFieldNames := column.FieldName + ':D'
  else
    FQuery.TQuery.IndexFieldNames := column.FieldName;

end;

function TEntity.pesquisar: iEntity;
begin
  result := self;
end;

function TEntity.sqlPesquisa: iEntity;
begin
  result := self;
  FQuery.getCampo(FCampo).getValor(FValor).sqlPesquisa(FTabela);
end;

function TEntity.sqlPesquisaData: iEntity;
begin
  result := self;
  FQuery.getCampo(FCampo).getValor(FValor).getDataInicial(FDataInicial)
    .getDataFinal(FDataFinal).sqlPesquisaData(FTabela);
end;

function TEntity.sqlPesquisaEstatica: iEntity;
begin
  result := self;
  FQuery.getCampo(FCampo).getValor(FValor).getDataInicial(FDataInicial)
    .getDataFinal(FDataFinal).sqlPesquisaEstatica(FTabela);
end;

end.
