unit UClasse.Entity.Transportadora;

interface

uses UClasse.Query, UInterfaces, UDados.Conexao, Data.DB,
  Vcl.Dialogs, System.SysUtils, Vcl.Forms, Winapi.Windows, Vcl.Controls,
  UClasse.Gravar.Log.Sistema, Vcl.ComCtrls, Vcl.DBGrids;

type

  TEntityCadastroTransportadora = class(TInterfacedObject,
    iCadastroTransportadora)
  private

    FQuery: iConexaoQuery;
    FGravarLog: iGravarLogOperacoes;
    FTabela: string;
    FCampo: string;
    FValor: string;
    FDataInicial: TDate;
    FDataFinal: TDate;

    FID: integer;
    FNOME_FANTASIA: string;
    FRAZAO_SOCIAL: string;
    FCPF_CNPJ: string;
    FINSCRICAO_ESTADUAL: string;
    FENDERECO: string;
    FBAIRRO: string;
    FNUMERO: integer;
    FCOMPLEMENTO: string;
    FCEP: string;
    FCIDADE: string;
    FESTADO: string;
    FTELEFONE: string;
    FCELULAR: string;
    FEMAIL: string;
    F_FUNCIONARIO_CADASTRO: integer;
    FRESPONSAVEL: string;
    FOBSERVACAO: string;

    FCodigo: integer;
    FNome: string;
    function getNome(value: string): iCadastroTransportadora;

  public

    function nomeTabela(value: string): iCadastroTransportadora;
    function getCampo(value: string): iCadastroTransportadora;
    function getValor(value: string): iCadastroTransportadora;
    function getDataInicial(value: TDate): iCadastroTransportadora;
    function getDataFinal(value: TDate): iCadastroTransportadora;
    function open(value: string): iCadastroTransportadora;
    function pesquisar: iCadastroTransportadora;
    function ExecSql: iCadastroTransportadora;
    function sqlPesquisa: iCadastroTransportadora;
    function sqlPesquisaData: iCadastroTransportadora;
    function sqlPesquisaEstatica: iCadastroTransportadora;

    function abrir: iCadastroTransportadora;
    function inserir: iCadastroTransportadora;
    function Gravar: iCadastroTransportadora;
    function deletar: iCadastroTransportadora;
    function atualizar: iCadastroTransportadora;
    function editar: iCadastroTransportadora;
    function cancelar: iCadastroTransportadora;
    function fecharQuery: iCadastroTransportadora;
    function codigoCadastro(sp: string): integer;
    function listarGrid(value: TDataSource): iCadastroTransportadora;
    function ordenarGrid(column: TColumn): iCadastroTransportadora;

    function getCodigo(value: integer): iCadastroTransportadora;
    function getNomeFantasia(value: string): iCadastroTransportadora;
    function getRazaoSocial(value: string): iCadastroTransportadora;
    function getCPFCNPJ(value: string): iCadastroTransportadora;
    function getInscricaoEstadual(value: string): iCadastroTransportadora;
    function getEndereco(value: string): iCadastroTransportadora;
    function getBairro(value: string): iCadastroTransportadora;
    function getNumero(value: integer): iCadastroTransportadora;
    function getComplemento(value: string): iCadastroTransportadora;
    function getCep(value: string): iCadastroTransportadora;
    function getCidade(value: string): iCadastroTransportadora;
    function getEstado(value: string): iCadastroTransportadora;
    function getTelefone(value: string): iCadastroTransportadora;
    function getCelular(value: string): iCadastroTransportadora;
    function getEmail(value: string): iCadastroTransportadora;
    function getFuncionario(value: integer): iCadastroTransportadora;
    function getResponsavel(value: string): iCadastroTransportadora;
    function getObservacao(value: string): iCadastroTransportadora;
    function exportar: iCadastroTransportadora;

    constructor create;
    destructor destroy; override;
    class function new: iCadastroTransportadora;
  end;

implementation

{ TEntityCadastroTransportadora }

function TEntityCadastroTransportadora.abrir: iCadastroTransportadora;
begin

  result := self;
  FQuery.Query(FTabela);

end;

function TEntityCadastroTransportadora.atualizar: iCadastroTransportadora;
begin
  result := self;
  FQuery.TQuery.Refresh;
end;

function TEntityCadastroTransportadora.cancelar: iCadastroTransportadora;
begin
  FQuery.TQuery.Cancel;
  FQuery.TQuery.close;
end;

function TEntityCadastroTransportadora.codigoCadastro(sp: string): integer;
begin
  result := FQuery.codigoCadastro('');
end;

constructor TEntityCadastroTransportadora.create;
begin
  FTabela := 'Grupos';
  FQuery := TConexaoQuery.new.Query(FTabela);

  FGravarLog := TGravarLogSistema.new;
  FGravarLog.getJanela('Grupos').getCodigoFuncionario(funcionarioLogado);
  // (0 { definir o usuário quando construir a aplicação } );

end;

function TEntityCadastroTransportadora.deletar: iCadastroTransportadora;
begin
  result := self;

  if FQuery.TQuery.RecordCount >= 1 then
  begin
    if application.MessageBox('Deseja realmente excluir este registro?',
      'Pergunta do sistema!', MB_YESNO + MB_ICONQUESTION) = mryes then
    begin

      FGravarLog.getNomeRegistro(FQuery.TQuery.FieldByName('grupo').AsString)
        .getCodigoRegistro(FQuery.TQuery.FieldByName('id').AsInteger).gravarLog;

      FQuery.TQuery.Delete;
    end;
  end;

end;

destructor TEntityCadastroTransportadora.destroy;
begin

  inherited;
end;

function TEntityCadastroTransportadora.editar: iCadastroTransportadora;
begin
  result := self;
  if FQuery.TQuery.RecordCount >= 1 then
  begin

    FGravarLog.getNomeRegistro(FQuery.TQuery.FieldByName('grupo').AsString)
      .getCodigoRegistro(FQuery.TQuery.FieldByName('id').AsInteger).gravarLog;

    FQuery.TQuery.Edit;

  end;
end;

function TEntityCadastroTransportadora.ExecSql: iCadastroTransportadora;
begin
  result := self;
  FQuery.ExecSql(FTabela);
end;

function TEntityCadastroTransportadora.exportar: iCadastroTransportadora;
begin
  result := self;
end;

function TEntityCadastroTransportadora.fecharQuery: iCadastroTransportadora;
begin
  FQuery.TQuery.close;
end;

function TEntityCadastroTransportadora.getBairro(value: string)
  : iCadastroTransportadora;
begin
  result := self;
  FBAIRRO := value;
end;

function TEntityCadastroTransportadora.getCampo(value: string)
  : iCadastroTransportadora;
begin
  result := self;
  FCampo := value;
end;

function TEntityCadastroTransportadora.getCelular(value: string)
  : iCadastroTransportadora;
begin
  result := self;
  FCELULAR := value;
end;

function TEntityCadastroTransportadora.getCep(value: string)
  : iCadastroTransportadora;
begin

end;

function TEntityCadastroTransportadora.getCidade(value: string)
  : iCadastroTransportadora;
begin

end;

function TEntityCadastroTransportadora.getCodigo(value: integer)
  : iCadastroTransportadora;
begin
  result := self;
  FCodigo := value;
end;

function TEntityCadastroTransportadora.getComplemento(value: string)
  : iCadastroTransportadora;
begin

end;

function TEntityCadastroTransportadora.getCPFCNPJ(value: string)
  : iCadastroTransportadora;
begin

end;

function TEntityCadastroTransportadora.getDataFinal(value: TDate)
  : iCadastroTransportadora;
begin
  result := self;
  FDataFinal := value;
  // FQuery.getDataFinal(value);
end;

function TEntityCadastroTransportadora.getDataInicial(value: TDate)
  : iCadastroTransportadora;
begin
  result := self;
  FDataInicial := value;
  // FQuery.getDataInicial(value);
end;

function TEntityCadastroTransportadora.getEmail(value: string)
  : iCadastroTransportadora;
begin

end;

function TEntityCadastroTransportadora.getEndereco(value: string)
  : iCadastroTransportadora;
begin

end;

function TEntityCadastroTransportadora.getEstado(value: string)
  : iCadastroTransportadora;
begin

end;

function TEntityCadastroTransportadora.getFuncionario(value: integer)
  : iCadastroTransportadora;
begin

end;

function TEntityCadastroTransportadora.getInscricaoEstadual(value: string)
  : iCadastroTransportadora;
begin

end;

function TEntityCadastroTransportadora.getNome(value: string)
  : iCadastroTransportadora;
begin
  result := self;
  FNome := value;
end;

function TEntityCadastroTransportadora.getNomeFantasia(value: string)
  : iCadastroTransportadora;
begin

end;

function TEntityCadastroTransportadora.getNumero(value: integer)
  : iCadastroTransportadora;
begin

end;

function TEntityCadastroTransportadora.getObservacao(value: string)
  : iCadastroTransportadora;
begin

end;

function TEntityCadastroTransportadora.getRazaoSocial(value: string)
  : iCadastroTransportadora;
begin

end;

function TEntityCadastroTransportadora.getResponsavel(value: string)
  : iCadastroTransportadora;
begin

end;

function TEntityCadastroTransportadora.getTelefone(value: string)
  : iCadastroTransportadora;
begin

end;

function TEntityCadastroTransportadora.getValor(value: string)
  : iCadastroTransportadora;
begin
  result := self;
  FValor := UpperCase(value);
end;

function TEntityCadastroTransportadora.Gravar: iCadastroTransportadora;
begin

  result := self;

  if FQuery.TQuery.State in [dsInsert] then
    FQuery.TQuery.FieldByName('id').AsInteger :=
      FQuery.codigoCadastro('SP_GEN_GRUPOS_ID');

  FQuery.TQuery.FieldByName('grupo').AsString := FNome;

  FGravarLog.getNomeRegistro(FQuery.TQuery.FieldByName('grupo').AsString)
    .getCodigoRegistro(FQuery.TQuery.FieldByName('id').AsInteger).gravarLog;

  try
    FQuery.TQuery.Post;
  except
    on e: exception do
    begin
      raise exception.create('Erro ao tentar gravar os dados. ' + e.Message);
    end;

  end;

end;

function TEntityCadastroTransportadora.inserir: iCadastroTransportadora;
begin
  result := self;
  FQuery.TQuery.EmptyDataSet;
  FQuery.TQuery.Append;
end;

function TEntityCadastroTransportadora.listarGrid(value: TDataSource)
  : iCadastroTransportadora;
begin

  result := self;

  FQuery.TQuery.FieldByName('id').DisplayLabel := 'Código';
  FQuery.TQuery.FieldByName('grupo').DisplayLabel := 'Grupo';
  FQuery.TQuery.FieldByName('grupo').DisplayWidth := 50;

  // FQuery.TQuery.SQL.Add('order by id desc');

  value.DataSet := FQuery.TQuery;

end;

class function TEntityCadastroTransportadora.new: iCadastroTransportadora;
begin
  result := self.create;
end;

function TEntityCadastroTransportadora.nomeTabela(value: string)
  : iCadastroTransportadora;
begin
  result := self;
  FTabela := value;
end;

function TEntityCadastroTransportadora.open(value: string)
  : iCadastroTransportadora;
begin
  FQuery.Query(FTabela);
end;

function TEntityCadastroTransportadora.ordenarGrid(column: TColumn)
  : iCadastroTransportadora;
begin

  if FQuery.TQuery.IndexFieldNames = column.FieldName then
    FQuery.TQuery.IndexFieldNames := column.FieldName + ':D'
  else
    FQuery.TQuery.IndexFieldNames := column.FieldName;

end;

function TEntityCadastroTransportadora.pesquisar: iCadastroTransportadora;
begin
  result := self;
end;

function TEntityCadastroTransportadora.sqlPesquisa: iCadastroTransportadora;
begin
  result := self;
  FQuery.getCampo(FCampo).getValor(FValor).sqlPesquisa(FTabela);
end;

function TEntityCadastroTransportadora.sqlPesquisaData: iCadastroTransportadora;
begin
  result := self;
  FQuery.getCampo(FCampo).getValor(FValor).getDataInicial(FDataInicial)
    .getDataFinal(FDataFinal).sqlPesquisaData(FTabela);
end;

function TEntityCadastroTransportadora.sqlPesquisaEstatica
  : iCadastroTransportadora;
begin
  result := self;
  FQuery.getCampo(FCampo).getValor(FValor).getDataInicial(FDataInicial)
    .getDataFinal(FDataFinal).sqlPesquisaEstatica(FTabela);
end;

end.
