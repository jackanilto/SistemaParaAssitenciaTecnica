unit UClasse.Entity.Retirada.Valores;

interface

uses UClasse.Query, UInterfaces, UDados.Conexao, Data.DB, Vcl.Dialogs,
  System.SysUtils, Vcl.Forms, Winapi.Windows, Vcl.Controls,
  UClasse.Gravar.Log.Sistema, Vcl.ComCtrls, Vcl.DBGrids, Vcl.Mask;

type

  TEntityRetiradaValores = class(TInterfacedObject, iRetiradaDeValores)
  private

    FQuery: iConexaoQuery;
    FGravarLog: iGravarLogOperacoes;
    FTabela: string;
    FCampo: string;
    FValor: string;
    FDataInicial: TDate;
    FDataFinal: TDate;

    FID_MOTIVO: integer;
    FMOTIVO: string;
    FVALOR_RETIRADA: Currency;
    FDATA: TDate;
    FHORA: TTime;
    FFUNCIONARIO: integer;
    FOBSERVACAO: String;

    FCodigo: integer;
    FNome: string;

  public

    function nomeTabela(value: string): iRetiradaDeValores;
    function getCampo(value: string): iRetiradaDeValores;
    function getValor(value: string): iRetiradaDeValores;
    function getDataInicial(value: TDate): iRetiradaDeValores;
    function getDataFinal(value: TDate): iRetiradaDeValores;
    function open(value: string): iRetiradaDeValores;
    function pesquisar: iRetiradaDeValores;
    function ExecSql: iRetiradaDeValores;
    function sqlPesquisa: iRetiradaDeValores;
    function sqlPesquisaData: iRetiradaDeValores;
    function sqlPesquisaEstatica: iRetiradaDeValores;

    function abrir: iRetiradaDeValores;
    function inserir: iRetiradaDeValores;
    function Gravar: iRetiradaDeValores;
    function deletar: iRetiradaDeValores;
    function atualizar: iRetiradaDeValores;
    function editar: iRetiradaDeValores;
    function cancelar: iRetiradaDeValores;
    function fecharQuery: iRetiradaDeValores;
    function codigoCadastro(sp: string): integer;
    function listarGrid(value: TDataSource): iRetiradaDeValores;
    function ordenarGrid(column: TColumn): iRetiradaDeValores;

    function getID_MOTIVO(value: integer): iRetiradaDeValores;
    function getMOTIVO(value: String): iRetiradaDeValores;
    function getVALOR_RETIRADA(value: Currency): iRetiradaDeValores;
    function getDATA(value: string): iRetiradaDeValores;
    function getHORA(value: string): iRetiradaDeValores;
    function getFUNCIONARIO(value: integer): iRetiradaDeValores;
    function getOBSERVACAO(value: string): iRetiradaDeValores;

    function exportar: iRetiradaDeValores;
    function validarData(componet: tmaskEdit): iRetiradaDeValores;

    function getCodigo(value: integer): iRetiradaDeValores;
    function getNome(value: string): iRetiradaDeValores;

    constructor create;
    destructor destroy; override;
    class function new: iRetiradaDeValores;
  end;

implementation

{ TEntityRetiradaValores }

function TEntityRetiradaValores.abrir: iRetiradaDeValores;
begin

  result := self;
  FQuery.Query(FTabela);

end;

function TEntityRetiradaValores.atualizar: iRetiradaDeValores;
begin
  result := self;
  FQuery.TQuery.Refresh;
end;

function TEntityRetiradaValores.cancelar: iRetiradaDeValores;
begin
  FQuery.TQuery.Cancel;
  // FQuery.TQuery.close;
end;

function TEntityRetiradaValores.codigoCadastro(sp: string): integer;
begin
  result := FQuery.codigoCadastro('');
end;

constructor TEntityRetiradaValores.create;
begin
  FTabela := 'RETIRADAS';
  FQuery := TConexaoQuery.new.Query(FTabela);

  FGravarLog := TGravarLogSistema.new;
  FGravarLog.getJanela('Retiradas de valores').getCodigoFuncionario
    (funcionarioLogado);
  // (0 { definir o usuário quando construir a aplicação } );

end;

function TEntityRetiradaValores.deletar: iRetiradaDeValores;
begin
  result := self;

  if FQuery.TQuery.RecordCount >= 1 then
  begin
    if application.MessageBox('Deseja realmente excluir este registro?',
      'Pergunta do sistema!', MB_YESNO + MB_ICONQUESTION) = mryes then
    begin

      FGravarLog.getNomeRegistro(FQuery.TQuery.FieldByName('TIPO_SAIDA')
        .AsString).getCodigoRegistro(FQuery.TQuery.FieldByName('id').AsInteger)
        .gravarLog;

      FQuery.TQuery.Delete;
    end;
  end;

end;

destructor TEntityRetiradaValores.destroy;
begin

  inherited;
end;

function TEntityRetiradaValores.editar: iRetiradaDeValores;
begin
  result := self;
  if FQuery.TQuery.RecordCount >= 1 then
  begin

    FGravarLog.getNomeRegistro(FQuery.TQuery.FieldByName('TIPO_SAIDA').AsString)
      .getCodigoRegistro(FQuery.TQuery.FieldByName('id').AsInteger).gravarLog;

    FQuery.TQuery.Edit;

  end;
end;

function TEntityRetiradaValores.ExecSql: iRetiradaDeValores;
begin
  result := self;
  FQuery.ExecSql(FTabela);
end;

function TEntityRetiradaValores.exportar: iRetiradaDeValores;
begin
  result := self;
end;

function TEntityRetiradaValores.fecharQuery: iRetiradaDeValores;
begin
  FQuery.TQuery.close;
end;

function TEntityRetiradaValores.getCampo(value: string): iRetiradaDeValores;
begin
  result := self;
  FCampo := value;
end;

function TEntityRetiradaValores.getCodigo(value: integer): iRetiradaDeValores;
begin
  result := self;
  FCodigo := value;
end;

function TEntityRetiradaValores.getDATA(value: string): iRetiradaDeValores;
begin

  result := self;

  if value = '  /  /    ' then
    raise Exception.create
      ('ERRO! Infome um data para o campo Data da retirada.')
  else
  begin
    try
      FDATA := StrToDate(value);
    except
      on e: Exception do
      begin
        raise Exception.create
          ('ERRO! Informe uma data válida para o campo Data de retirada.');
      end;

    end;
  end;

end;

function TEntityRetiradaValores.getDataFinal(value: TDate): iRetiradaDeValores;
begin
  result := self;
  FDataFinal := value;
  // FQuery.getDataFinal(value);
end;

function TEntityRetiradaValores.getDataInicial(value: TDate)
  : iRetiradaDeValores;
begin
  result := self;
  FDataInicial := value;
  // FQuery.getDataInicial(value);
end;

function TEntityRetiradaValores.getFUNCIONARIO(value: integer)
  : iRetiradaDeValores;
begin

  result := self;
  FFUNCIONARIO := value;

end;

function TEntityRetiradaValores.getHORA(value: string): iRetiradaDeValores;
begin

  result := self;

  if value = '  :  :  ' then
  begin
    raise Exception.create
      ('ERRO! Infome um horário para o campo Horário da retirada.');
  end;

  try
    FHORA := StrToTime(value);
  except
    on e: Exception do
    begin
      raise Exception.create
        ('ERRO! Informe um valor válido para o campo Horario da retirada.');
    end;

  end;

end;

function TEntityRetiradaValores.getID_MOTIVO(value: integer)
  : iRetiradaDeValores;
begin

  result := self;

  if value = 0 then
  raise Exception.Create('ERRO! Infome o motivo da retirada');

  FID_MOTIVO := value;

end;

function TEntityRetiradaValores.getMOTIVO(value: String): iRetiradaDeValores;
begin

  Result := self;

  if value = EmptyStr then
    raise Exception.Create('ERRO! Informe o motivo da retirada.');

  FMOTIVO := value;

end;

function TEntityRetiradaValores.getNome(value: string): iRetiradaDeValores;
begin
  result := self;
  FNome := value;
end;

function TEntityRetiradaValores.getOBSERVACAO(value: string)
  : iRetiradaDeValores;
begin

  result := self;

  FOBSERVACAO := value;

end;

function TEntityRetiradaValores.getValor(value: string): iRetiradaDeValores;
begin
  result := self;
  FValor := UpperCase(value);
end;

function TEntityRetiradaValores.getVALOR_RETIRADA(value: Currency)
  : iRetiradaDeValores;
begin

  result := self;
  FVALOR_RETIRADA := value;

end;

function TEntityRetiradaValores.Gravar: iRetiradaDeValores;
begin

  result := self;

  if FQuery.TQuery.State in [dsInsert] then
    FQuery.TQuery.FieldByName('id').AsInteger :=
      FQuery.codigoCadastro('SP_GEN_RETIRADAS_ID');

  // ID_MOTIVO    INTEGER NOT NULL,
  // MOTIVO       VARCHAR(100),
  // VALOR        NUMERIC(8,2),
  // DATA         DATE,
  // HORA         TIME,
  // FUNCIONARIO  INTEGER,
  // OBSERVACAO   VARCHAR(255)

  FGravarLog.getNomeRegistro(FQuery.TQuery.FieldByName('TIPO_SAIDA').AsString)
    .getCodigoRegistro(FQuery.TQuery.FieldByName('id').AsInteger).gravarLog;

  try
    FQuery.TQuery.Post;
  except
    on e: Exception do
    begin
      raise Exception.create('Erro ao tentar gravar os dados. ' + e.Message);
    end;

  end;

end;

function TEntityRetiradaValores.inserir: iRetiradaDeValores;
begin
  result := self;
  FQuery.TQuery.EmptyDataSet;
  FQuery.TQuery.Append;
end;

function TEntityRetiradaValores.listarGrid(value: TDataSource)
  : iRetiradaDeValores;
begin

  result := self;

  with FQuery.TQuery do
  begin
    FieldByName('ID').DisplayLabel := 'Código';
    FieldByName('ID_MOTIVO').Visible := false;;
    FieldByName('MOTIVO').DisplayLabel := 'Motivo';
    FieldByName('VALOR').DisplayLabel := 'Valor';
    FieldByName('DATA').DisplayLabel := 'Data';
    FieldByName('HORA').DisplayLabel := 'Hora';
    FieldByName('FUNCIONARIO').DisplayLabel := 'Funcionário';
    FieldByName('OBSERVACAO').DisplayLabel := 'Observação';

    FieldByName('MOTIVO').DisplayWidth := 40;
    FieldByName('OBSERVACAO').DisplayWidth := 40;

  end;

  value.DataSet := FQuery.TQuery;

end;

class function TEntityRetiradaValores.new: iRetiradaDeValores;
begin
  result := self.create;
end;

function TEntityRetiradaValores.nomeTabela(value: string): iRetiradaDeValores;
begin
  result := self;
  FTabela := value;
end;

function TEntityRetiradaValores.open(value: string): iRetiradaDeValores;
begin
  FQuery.Query(FTabela);
end;

function TEntityRetiradaValores.ordenarGrid(column: TColumn)
  : iRetiradaDeValores;
begin

  if FQuery.TQuery.IndexFieldNames = column.FieldName then
    FQuery.TQuery.IndexFieldNames := column.FieldName + ':D'
  else
    FQuery.TQuery.IndexFieldNames := column.FieldName;

end;

function TEntityRetiradaValores.pesquisar: iRetiradaDeValores;
begin
  result := self;
end;

function TEntityRetiradaValores.sqlPesquisa: iRetiradaDeValores;
begin
  result := self;
  FQuery.getCampo(FCampo).getValor(FValor).sqlPesquisa(FTabela);
end;

function TEntityRetiradaValores.sqlPesquisaData: iRetiradaDeValores;
begin
  result := self;
  FQuery.getCampo(FCampo).getValor(FValor).getDataInicial(FDataInicial)
    .getDataFinal(FDataFinal).sqlPesquisaData(FTabela);
end;

function TEntityRetiradaValores.sqlPesquisaEstatica: iRetiradaDeValores;
begin
  result := self;
  FQuery.getCampo(FCampo).getValor(FValor).getDataInicial(FDataInicial)
    .getDataFinal(FDataFinal).sqlPesquisaEstatica(FTabela);
end;

function TEntityRetiradaValores.validarData(componet: tmaskEdit)
  : iRetiradaDeValores;
var
  d: TDate;
begin

  result := self;

  try
    d := StrToDate(componet.Text);
  except
    componet.SetFocus;
    componet.Clear;
    raise Exception.create('Digite uma data válida.');
  end;
end;

end.
